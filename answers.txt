1. Как вы думаете, чем плохо задание атрибута компонента `key` функцией Math.random()?

    Возможно, значения key будут переопределяться при каждом обновлении компонента (будет обновляться функция), тем самым будет перерисоваться та часть компонента, которая на самом деле не изменилась.

2. Как будет выглядеть [этот](https://www.notion.so/31-ed5969c31cc64e96b25edc9b8f5efaef) пример, если мы кроме id будем передавать еще один параметр title?

    наверное, title будет передан вместе с id в фигурных скобках: 
        onClick => ({id, title}) => (e) => {...function}

3. В чем отличие VirtualDOM от обычного DOM?

    VirtualDOM -  это объект JavaScript, с помощью которого мы может взаимодействоваться с DOM, не является официальной спецификацией, а DOM это объектное представление элементов HTML, которое определяет то, что нужно отображать на странице. 

4. В каком порядке выйдут сообщения в консоли и почему?
    
    handleChange = () => {
    	console.log('foo');
    
    	this.setState({
    		checked: !this.state.checked, 
    		},
    		()=>{console.log('baz')}
    	);
    	console.log('bar') 
    };


    foo, bar, baz

    потому что метод setState работает асинхронно
    
5. Какую проблему решает использование рефов?

    Получение доступа (ссылки) к DOM-узлам или React-элементам, созданным в рендер-методе, что позволяет родительскому компоненту менять ребёнка (и наоборот) без перерендера и передачи пропсов. (Это могут быть - управление фокусом, выделение текста, воспроизмеведние медиа, вызов анимаций и интеграция со сторонними DOM-библиотеками)

6. Как вы думаете почему вызов методов ребенка из родительского компонента противоречит философии реакта?

    Возможно, потому что в React одностороннй поток данных и идёт он в иерархическом порядке сверху вниз.

7. Можно ли с помощью хука `setRef` передать `ref` дочерним элементам? 

    Наверное, да, так как дочернему компоненту передастся this родителя и будет доступен в пределах функции.

8. Что дает нам использование кастомных хуков?

    Сокращение повторения кода, упрощение написания программ в целом. 