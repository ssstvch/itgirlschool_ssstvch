1. Если в [этом](https://www.notion.so/30-62ef06a08dc54069a387a788d9421e9d) примере, изменить порядок Route таким образом:
    
	<Routes>
    	<Route path="/" element={<Home />} />
    	<Route path="/about" element={<About/>} />
    	<Route path="/users" element={<Users />} />
    </Routes>
    
    То какой компонент будет отрисован по адресу /users? Объясните почему.

Тот же заголовок Users. Потому что при клике на ссылку router отрисует наиболее подходящий для ссылки компонент. И не важно в каком порядке они написаны.
    
2. Какое сообщение появится на экране по адресу http://localhost:3000/users/12345
    
    ...
    <Route path='/users/:number' element={<User />} />
    ...
    
    function User(props) {
        const number = props.match.params.number;
        return(
            number===12345
                ? <h1>Моя личная страница</h1>
                : <h1>Страница пользователя {number}</h1>
        );
    }

	По логике отрисуется второй заголовок, т.к. number является строкой, а не числом в параметрах. Но у меня для проверки код отказывается работать и в консоли показывает пустой объект props. Работает через хук роутера useParams:

	function User() {
		let props = useParams().id;
		return props === 12345 ? (
			<h1>Моя личная страница {props}</h1>
		) : (
			<h1>Страница пользователя {props}</h1>
		);
	}

	В консоль выводит второй заголовок, как и предполагала.
			
3. Вспомните, какой второй параметр принимает метод `map` 

	thisValue - объект, на который может ссылаться this внутри функции map, необязательный параметр. Если не передан, то this === undefined.

4. Как бы вы подошли к решению задачи по выводу компонентом `<CardList>` только тех экземпляров компонента `<Card>`, цена которых не превышает заданную?

	let lowPrice;
	{
		shoes.filter((e) => {
			return e.price > lowPrice
		})
	}

5. Как задать параметр в пути? Например, *filter*

	/about/:filter

6. Какая разница между `element` и `children` в указании роутера?

	element - прямо указывает на элемент/компонент React, который должен отрисоваться по пути маршрута, позволяет указывать пропсы для компонента
	children - этот атрибут принимает функцию, для версий <6, нужен был для того, чтобы передавать элементу,компоненту пропсы. Разница с атрибутом render - children всегда рендерится, даже когда путь не совпадает. В сети пишут, что на практике никто с этим методом не работает.

7. Зачем нужен `exact`?

	Для версий <6 был нужен, чтобы указать "строгий" путь маршрута. То есть только по такому пути мы можем попасть на эту страницу "/user" при указании exact, а "/user/1" уже выдаст ошибку. В 6-й версии это значение стоит по умолчанию. Если мы хотим, чтобы у нас работали дочерние роуты, то нужно указать в пути "/user/*".

8. Cамостоятельно разберитесь, зачем нужны *match*, *location* и *history*? 

	Это, насколько я поняла, относится в версии 5 и ниже, так как в 6 версии используются хуки. 

	Объект match ищет совпадения компонента внутри route и URL. 4 ключа: isExact - возвращает true/false, params, path и URL-адрес.

	Location хранит информацию о том, где сейчас находится приложение, куда мы хотим его переместить и где оно было. Одно из применений - проверить изменилось ли имя пути компонента. В компоненте два объекта location, одни из них внутри объекта history и им пользоваться не стоит, т.к. он изменчив. 

	History позволяет управлять и обрабатывать историю браузера внутрий компонентов. Обычно содержит кол-во записей в стеке (length). Текущее активное действие, как мы добрались до компонента (action). Текущее местоположение, имеет свойства path, search, hash и state - всё это изменчиво/

9. Как можно сделать перенаправление на другую страницу по клику на кнопку с помощью `history`? *Ищите ответ в документации к react-router-dom*

push(/path) - помещает новую запись в стек истории, тем самым перенаправляя


