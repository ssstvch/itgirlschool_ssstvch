1. Кратко опишите основные отличия `state` от `props`. 

    props - объект, передающийся компоненту извне, изменить отдельные пропсы мы не можем

    state - объект, который создаётся и зависит от компонента, его менять мы можем

2. Какую ошибку я допустила в следующем коде и как ее исправить:
    
    handleChange = () => {
        const chechedArr = this.state.arr; // [1,2,3] 
    		chechedArr.push(5); // [1,2,3,5] 
        this.setState({
          arr: chechedArr,
        });
    };

    изменить const на let, так как const изменить нельзя
    
3. Можно ли повесить на один элемент несколько обработчиков событий?

    да, например, mouseOver и onClick

4. Каким образом можно изменить `state`?

    с помощью функции setState

5. Попробуйте предсказать какие сообщения будут в консоли и объяснить результат:
    
    handleChange = () => {
        console.log(this.state.checked) //#1 false 
        this.setState({
          checked: !this.state.checked,
        });
        console.log(this.state.checked) //#2 ?
      };  

    вроде, должно быть true, если произошло событие, которое вызвало эту функцию. в функции setState мы передали объект со значением checked: true, поэтому true.
    
6. Какими способами можно задать функцию `handleChange` и какой из них является самым правильным?

    с помощью обычной и стрелочной функции. лучше стрелочной, т.к. стрелочные функции не имеют своего контекста и берут this (для классов) извне, а обычные имеют контект и this в ней будет undefined. но тут можно вызвать функцию так: function.bind(this), тогда обычная функция сработает верно, но это дополнительные буковки, а так не пойдет :D ну и работает медленнее

7. Чем отличаются классовые и функциональные компоненты? Какие из них предпочтительнее в 2021 году?

    в классах можно устанавливать дефолтное значение пропсов через static defaultProps, что, возможно, и удобно..также удобно учить React через классовые компоненты, особенно жизненный цикл компонента, более наглядно

    но используют сейчас в основном функциональные компоненты, с появлением хуков они стали идентичны классам и компактнее в записи. дефолтные пропсы тут тоже можно устанавливать, но с помощью || (если первая часть выражение false - возвращает вторую часть выражения)

8. Есть ли `this` в функциональных компонентах? Как можно получить к нему доступ?

    нет. вроде бы this просто в функциональных компонентах не используется, в них используются хуки.

9. Можно ли использовать `props` и `state` одновременно?

    да, у них разное предназначение

10. Где можно задать `state` без использования команды `this.setState`?

    в конструкторе класса

11. Может ли состояние классового компонента не быть объектом? А функционального?

    state является объектом JS, который хранит в себе димамические данные и не может быть ничем другим.

12. Способны ли функциональные компоненты самостоятельно хранить состояние?

    насколько я поняла, да (не совсем поняла эту тему :( )

13. Как использовать хуки в классовых компонентах?

    никак, хуки используются вместо классов

14. А как задать начальное состояние `props`, если они еще не были переданы?

    в классах как дефолтные пропсы, а функциях передавать через || 