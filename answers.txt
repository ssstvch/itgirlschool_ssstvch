1. Чем отличаются куки, localStorage и sessionStorage?

    Cookie - данные можно передать на сервер через заголовки, ограниченный срок хранения (устанавливается при создании), объём не более 4 Кбайт. Могут быть защищёнными.
    localStorage - хранит данные бессрочно, объём до 5 Мбайт, очищается JS-ом или при чистке кэша браузера.
    sessionStorage - хранит данные пока продолжается текущая сессия, в каждой вкладке свои данные, объем меньше, чем у localStorage, но больше че м у Cookie.

 Что стоит использовать, если нам нужно надолго сохранить много пользовательских данных?

    localStorage


2. Как добавить и получить значение из веб-хранилища? 

    Добавить:
        localStorage.setItem('key', 'value');
    Получить:
        localStorage.getItem('key');


3. Придумайте еще минимум 3 ситуации помимо предложенных в уроке, для чего может быть нужно сохранять данные пользователя и какие? 

    Какую цветовую тему сайта выбрал пользователь в прошлую сессию;
    На какой серии и какой минуте остановился пользователь;
    Часовой пояс или город предыдущей сессии.
    

    *Пример из урока: запомнить, что пользователь уже залогинился, что у него лежит в корзине или в каком разделе сайта он сейчас находится*

4. Как сделать валидацию номера кредитной карты? 

    Самое простое - проверить формат номера кредитной карты через регулярное выражение, чтобы это был именно номер и ничего другого.

    Сложнее (для меня пока что) уже проверить все остальные данные карты: Имя, Тип, Дату годности,CVV.

    По первым примерно 4-м цифрам можно узнать платежную систему, по 6-ти уже банк и страну (иногда и другие данные карты из онлайн базы).

5. Как сделать input, который будет принимать только числа (минимум 2 способа)?

    1 способ:
        <input type="number"></input>;
        (позволяет вводит первой цифрой 0);

    2 способ:
        <input type="text" oninput="this.value = this.value.replace(/[^\d]/g,"");"></input>

    
6. Найдите регулярное выражение для ФИО на русском языке

    Проверка Фамилии, в том числе двойной, с учётом буквы ё:
        /^[А-ЯЁ][а-яё]{2,16}([-][А-ЯЁ][а-яё]{2,16})?$/gm

7. Напишите самый красивый и понятный вид, как должно выглядеть невалидное поле, чтобы пользователю было понятно, что в него вводить и что не так, если ввод некорректен (теги html+css)

    HTML:
        <input class="tel" type="tel" placeholder="+7 (999) 999-99-99" pattern="^^\+?[78][-\(]?\d{3}\)?-?\d{3}-?\d{2}-?\d{2}$" required></input> </br>
        <small>Поле должно содержать телефон в формате +7 (999) 123-45-67</small>

    SCSS:
        .tel {
            &:invalid:not(:placeholder-shown) {
                outline: none;
                box-shadow: 0 0 0 3px red;
            }
            &:valid:not(:placeholder-shown) {
                outline: none;
                box-shadow: 0 0 0 3px green;
        }
}

8. Какие есть недостатки у стандартного способа задания валидации через HTML5?

    Невозможно:
        - сделать маску пола input;
        - проверять данные в процессе ввода;
        - указать на ошибку более точно;
        - некорректно проверяет e-mail телефон;
        - ошибку показывает только при отправке формы.

