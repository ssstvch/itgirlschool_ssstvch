1. В чем разница между контролируемыми и неконтролируемыми компонентами?

    Контролируемые компоненты обрабатывают данные формы с помощью состояния, а неконтролируемые самим DOMом.

2. Есть ли смысл использовать метод `shouldComponentUpdate()` в `PureComponent`?

    Нет, PureComponent сам отслеживает изменения компонентов.

3. Будет ли перерисовываться данный компонент?   
    
    
    class PureComponent extends React.PureComponent {
      state = { 
        item: {
    			count:0
    		},
      }
      
      handleClick= () =>  {
        const item = this.state.item;
        item.count = this.state.item.count ++ ;
        this.setState({item});
      }
      render() {
        return <h2>{this.state.item.count}</h2>
      }
    }

    Нет, так как PureComponent использует неглубокую проверку, т.е. отслеживает только изменения в ссылке на объект.
    
4. Что будет, если чекбоксу не передать свойство '`checked`'?

    Мы не сможем отслеживать checked у чебокса (?)

5. В чем главное преимущество использования `PureComponent`?

    Оптимизация react-приложения посредством автоматизации метода shouldComponentUpdate.

6. Что будет, если компоненту `input` передать метод `onChange`, но не передать `value`? А что будет, если компоненту `input` передать `value`, но не передать метод `onChange`?

    В первом случае ничего не изменится, так как метод onChange (как предполагается, он меняет стейт) имеет доступ к value инпута и может с ним взаимодействовать. Получается, что инпут будет контролируемым.

    Во втором случае мы не можем получить доступ к value через состояние, так как не ослеживаем изменения и модем получит  значение только непосредственно через DOM.

7. Как сделать из обычного `select` список с несколькими выбранными значениями (мультиселект)?

    добавить атрибут multiple={true}

8. Напишите пример валидации текстового поля на React - чтобы оно было не пустым

    const [inputText, setInputText] = useState("");

    const handleChange = (e) => {
        let value = e.target.value;
        value !== "" ? setInputText(e.target.value) : alert(`Введите текст`)
    }

    <input type="text" onChange={handleChange} value={inputText} />

9. Приведите пример простейшей формы логина на сторонних компонентах (Formic, Material или Bootstrap на ваш выбор)

    <Box>
        <FormControl>
        <TextField
            required
            id={"login"}
            name={"login"}
            label={"Login"}
            type={"text"}
            helperText={"Type your login"}
        />
        </FormControl>
        <FormControl>
            <TextField
                required
                id={"password"}
                name={"password"}
                label={"Password"}
                type={"password"}
                helperText={"Type your password"}
            />
        </FormControl>
        <Button onClick={submit}>Submit</Button>
    </Box>
    